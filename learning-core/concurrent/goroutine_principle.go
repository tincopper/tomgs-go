package main

// goroutine机制
func TestGoroutinePrinciple()  {
    //从根本上来说goroutine就是一种Go语言版本的协程（ coroutine）。因此，要理解
    //goroutine的运作机理，关键就是理解传统意义上协程的工作机理。
    // 协程
    /*
    协程，也有人称之为轻量级线程，具备以下几个特点。
     能够在单一的系统线程中模拟多个任务的并发执行。
     在一个特定的时间，只有一个任务在运行，即并非真正地并行。
     被动的任务调度方式，即任务没有主动抢占时间片的说法。当一个任务正在执行时，外
    部没有办法中止它。要进行任务切换，只能通过由该任务自身调用yield()来主动出让
    CPU使用权。
     每个协程都有自己的堆栈和局部变量。
    每个协程都包含3种运行状态：挂起、运行和停止。停止通常表示该协程已经执行完成（包
    括遇到问题后明确退出执行的情况），挂起则表示该协程尚未执行完成，但出让了时间片，以后
    有机会时会由调度器继续执行。
     */
    
}