package main

import (
    "fmt"
    "github.com/golang/protobuf/proto"
    "google.golang.org/protobuf/compiler/protogen"
    service "tomgs-go/learning-protoc/protoc-plugin/protoc-gen-gwroute2/genproto"
)

func main() {
    protogen.Options{

    }.Run(func(gen *protogen.Plugin) error {
        for _, f := range gen.Files {
            if !f.Generate {
                continue
            }
            generateFile(gen, f)
        }
        return nil
    })
}

// generateFile generates a _gwroute.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
    filename := file.GeneratedFilenamePrefix + "_gwroute.pb.go"
    g := gen.NewGeneratedFile(filename, file.GoImportPath)
    g.P("// Code generated by protoc-gen-gwroute. DO NOT EDIT.")
    g.P()
    g.P("package ", file.GoPackageName)
    g.P()

    value, err := proto.GetExtension(file.Proto.GetOptions(), service.E_Endpoint)
    if err != nil {
        g.P("// endpoint option not found")
        return g
    }
    endpointStr := *value.(*string)
    generateImports(g)

    g.P("func init() {")
    for _, service := range file.Services {
        g.P(fmt.Sprintf("route.AddRoute(%sRouteDefinition)", service.GoName))
    }
    g.P("}\n")

    for _, service := range file.Services {
        serviceName := service.GoName
        g.P(fmt.Sprintf("func %sRouteDefinition(gwmux *runtime.ServeMux) {", serviceName))
        g.P(fmt.Sprintf("\troute.AddUnitRoute(\"%s\", gwmux, func(gwmux *runtime.ServeMux, conn *grpc.ClientConn) error {", endpointStr))
        g.P(fmt.Sprintf("\t\treturn Register%sHandler(context.Background(), gwmux, conn)", serviceName))
        g.P("\t})")
        g.P("}\n")
    }

    return g
}

func generateImports(g *protogen.GeneratedFile) {
    // import (
    //    "context"
    //    "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
    //    "google.golang.org/grpc"
    //    "tomgs-go/learning-grpc-gateway/hello-world/route"
    //)
    g.P("import (")
    g.P(`"context"`)
    g.P(`"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"`)
    g.P(`"google.golang.org/grpc"`)
    g.P(`"tomgs-go/learning-grpc-gateway/hello-world/route"`)
    g.P(` ) `)
}